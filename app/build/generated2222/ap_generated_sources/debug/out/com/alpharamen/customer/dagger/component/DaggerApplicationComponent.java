// Generated by Dagger (https://google.github.io/dagger).
package com.alpharamen.customer.dagger.component;

import android.app.Activity;
import android.app.Application;
import android.content.Context;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModel;
import com.alpharamen.customer.application.BaseApp;
import com.alpharamen.customer.application.BaseApp_MembersInjector;
import com.alpharamen.customer.base.BaseActivity_MembersInjector;
import com.alpharamen.customer.dagger.module.ActivityProvider_AboutUsActivity;
import com.alpharamen.customer.dagger.module.ActivityProvider_AddressListActivity;
import com.alpharamen.customer.dagger.module.ActivityProvider_BindHomeActivity;
import com.alpharamen.customer.dagger.module.ActivityProvider_BindLoginActivity;
import com.alpharamen.customer.dagger.module.ActivityProvider_BindNotificationActivity;
import com.alpharamen.customer.dagger.module.ActivityProvider_BindSignupActivity;
import com.alpharamen.customer.dagger.module.ActivityProvider_BindSplashActivity;
import com.alpharamen.customer.dagger.module.ActivityProvider_ChangeAddressActivity;
import com.alpharamen.customer.dagger.module.ActivityProvider_ChangeLocationActivity;
import com.alpharamen.customer.dagger.module.ActivityProvider_DetailHubActivity;
import com.alpharamen.customer.dagger.module.ActivityProvider_EditProfileActivity;
import com.alpharamen.customer.dagger.module.ActivityProvider_FilterActivity;
import com.alpharamen.customer.dagger.module.ActivityProvider_FilterResultActivity;
import com.alpharamen.customer.dagger.module.ActivityProvider_FoodDetailActivity;
import com.alpharamen.customer.dagger.module.ActivityProvider_MyOrdersActivity;
import com.alpharamen.customer.dagger.module.ActivityProvider_OfferDetailActivity;
import com.alpharamen.customer.dagger.module.ActivityProvider_OnboardActivity;
import com.alpharamen.customer.dagger.module.ActivityProvider_PaymentActivity;
import com.alpharamen.customer.dagger.module.ActivityProvider_TrackItemActivity;
import com.alpharamen.customer.dagger.module.ApplicationModule;
import com.alpharamen.customer.dagger.module.ApplicationModule_ProvideApplicationFactory;
import com.alpharamen.customer.dagger.module.ApplicationModule_ProvideContextFactory;
import com.alpharamen.customer.dagger.module.FragmentProvider_BindForgotPasswordFragment;
import com.alpharamen.customer.dagger.module.FragmentProvider_BindProfileFragment;
import com.alpharamen.customer.dagger.module.FragmentProvider_BottomSheetFragment;
import com.alpharamen.customer.dagger.module.FragmentProvider_FoodItemListFragment;
import com.alpharamen.customer.dagger.module.FragmentProvider_HubsListFragment;
import com.alpharamen.customer.dagger.module.FragmentProvider_NotificationFragment;
import com.alpharamen.customer.dagger.module.FragmentProvider_OffersFragment;
import com.alpharamen.customer.dagger.module.FragmentProvider_SearchItemFragment;
import com.alpharamen.customer.data.local.preference.PreferencesHandler;
import com.alpharamen.customer.data.local.preference.PreferencesHandler_Factory;
import com.alpharamen.customer.data.local.room.MusicDbHelper;
import com.alpharamen.customer.data.local.room.MusicDbHelper_Factory;
import com.alpharamen.customer.data.remote.WebService;
import com.alpharamen.customer.data.remote.WebService_Factory;
import com.alpharamen.customer.data.repository.FoodRepository;
import com.alpharamen.customer.data.repository.FoodRepository_Factory;
import com.alpharamen.customer.factory.ViewModelProviderFactory;
import com.alpharamen.customer.factory.ViewModelProviderFactory_Factory;
import com.alpharamen.customer.utils.InternetUtils;
import com.alpharamen.customer.utils.InternetUtils_Factory;
import com.alpharamen.customer.utils.ToastUtils;
import com.alpharamen.customer.utils.ToastUtils_Factory;
import com.alpharamen.customer.view.ui.about_us.AboutUsActivity;
import com.alpharamen.customer.view.ui.about_us.AboutUsActivity_MembersInjector;
import com.alpharamen.customer.view.ui.address_list.AddressListActivity;
import com.alpharamen.customer.view.ui.address_list.AddressListActivity_MembersInjector;
import com.alpharamen.customer.view.ui.cart.CartFragment;
import com.alpharamen.customer.view.ui.cart.CartFragment_MembersInjector;
import com.alpharamen.customer.view.ui.change_address.ChangeAddressActivity;
import com.alpharamen.customer.view.ui.change_address.ChangeAddressActivity_MembersInjector;
import com.alpharamen.customer.view.ui.change_location.ChangeLocationActivity;
import com.alpharamen.customer.view.ui.change_location.ChangeLocationActivity_MembersInjector;
import com.alpharamen.customer.view.ui.edit_profile.EditProfileActivity;
import com.alpharamen.customer.view.ui.edit_profile.EditProfileActivity_MembersInjector;
import com.alpharamen.customer.view.ui.filter.FilterActivity;
import com.alpharamen.customer.view.ui.filter.FilterActivity_MembersInjector;
import com.alpharamen.customer.view.ui.filter_result.FilterResultActivity;
import com.alpharamen.customer.view.ui.filter_result.FilterResultActivity_MembersInjector;
import com.alpharamen.customer.view.ui.food_item_detail_page.FoodDetailActivity;
import com.alpharamen.customer.view.ui.food_item_detail_page.FoodDetailActivity_MembersInjector;
import com.alpharamen.customer.view.ui.home_page.HomeActivity;
import com.alpharamen.customer.view.ui.home_page.HomeActivity_MembersInjector;
import com.alpharamen.customer.view.ui.hub_detail_page.DetailHubActivity;
import com.alpharamen.customer.view.ui.hub_detail_page.DetailHubActivity_MembersInjector;
import com.alpharamen.customer.view.ui.login.BottomFragment;
import com.alpharamen.customer.view.ui.login.LoginActivity;
import com.alpharamen.customer.view.ui.login.LoginActivity_MembersInjector;
import com.alpharamen.customer.view.ui.myorders.MyOrdersActivity;
import com.alpharamen.customer.view.ui.myorders.MyOrdersActivity_MembersInjector;
import com.alpharamen.customer.view.ui.nearme.FoodItemListFragment;
import com.alpharamen.customer.view.ui.nearme.FoodItemListFragment_MembersInjector;
import com.alpharamen.customer.view.ui.nearme.HubsListFragment;
import com.alpharamen.customer.view.ui.nearme.HubsListFragment_MembersInjector;
import com.alpharamen.customer.view.ui.notification.NotificationActivity;
import com.alpharamen.customer.view.ui.notification.NotificationActivity_MembersInjector;
import com.alpharamen.customer.view.ui.notification.NotificationFragment;
import com.alpharamen.customer.view.ui.notification.NotificationFragment_MembersInjector;
import com.alpharamen.customer.view.ui.offer_detail.OfferDetailActivity;
import com.alpharamen.customer.view.ui.offer_detail.OfferDetailActivity_MembersInjector;
import com.alpharamen.customer.view.ui.offers.OffersFragment;
import com.alpharamen.customer.view.ui.offers.OffersFragment_MembersInjector;
import com.alpharamen.customer.view.ui.onboarding.OnboardActivity;
import com.alpharamen.customer.view.ui.onboarding.OnboardActivity_MembersInjector;
import com.alpharamen.customer.view.ui.order_placed.OrderPlacedActivity;
import com.alpharamen.customer.view.ui.order_placed.OrderPlacedActivity_MembersInjector;
import com.alpharamen.customer.view.ui.profile.ProfileFragment;
import com.alpharamen.customer.view.ui.profile.ProfileFragment_MembersInjector;
import com.alpharamen.customer.view.ui.search.SearchItemFragment;
import com.alpharamen.customer.view.ui.search.SearchItemFragment_MembersInjector;
import com.alpharamen.customer.view.ui.signup.SignupActivity;
import com.alpharamen.customer.view.ui.signup.SignupActivity_MembersInjector;
import com.alpharamen.customer.view.ui.splash.SplashActivity;
import com.alpharamen.customer.view.ui.splash.SplashActivity_MembersInjector;
import com.alpharamen.customer.view.ui.track_item.TrackItemActivity;
import com.alpharamen.customer.view.ui.track_item.TrackItemActivity_MembersInjector;
import com.alpharamen.customer.viewmodel.AboutUsViewModel;
import com.alpharamen.customer.viewmodel.AboutUsViewModel_Factory;
import com.alpharamen.customer.viewmodel.AddressListViewModel;
import com.alpharamen.customer.viewmodel.AddressListViewModel_Factory;
import com.alpharamen.customer.viewmodel.CartViewModel;
import com.alpharamen.customer.viewmodel.CartViewModel_Factory;
import com.alpharamen.customer.viewmodel.ChangeAddressViewModel;
import com.alpharamen.customer.viewmodel.ChangeAddressViewModel_Factory;
import com.alpharamen.customer.viewmodel.ChangeLocationViewModel;
import com.alpharamen.customer.viewmodel.ChangeLocationViewModel_Factory;
import com.alpharamen.customer.viewmodel.DetailViewModel;
import com.alpharamen.customer.viewmodel.DetailViewModel_Factory;
import com.alpharamen.customer.viewmodel.EditProfileViewModel;
import com.alpharamen.customer.viewmodel.EditProfileViewModel_Factory;
import com.alpharamen.customer.viewmodel.FilterResultViewModel;
import com.alpharamen.customer.viewmodel.FilterResultViewModel_Factory;
import com.alpharamen.customer.viewmodel.FilterViewModel;
import com.alpharamen.customer.viewmodel.FilterViewModel_Factory;
import com.alpharamen.customer.viewmodel.FoodDetailViewModel;
import com.alpharamen.customer.viewmodel.FoodDetailViewModel_Factory;
import com.alpharamen.customer.viewmodel.FoodItemListViewModel;
import com.alpharamen.customer.viewmodel.FoodItemListViewModel_Factory;
import com.alpharamen.customer.viewmodel.HomeViewModel;
import com.alpharamen.customer.viewmodel.HomeViewModel_Factory;
import com.alpharamen.customer.viewmodel.HubListViewModel;
import com.alpharamen.customer.viewmodel.HubListViewModel_Factory;
import com.alpharamen.customer.viewmodel.LoginViewModel;
import com.alpharamen.customer.viewmodel.LoginViewModel_Factory;
import com.alpharamen.customer.viewmodel.MyOrdersViewModel;
import com.alpharamen.customer.viewmodel.MyOrdersViewModel_Factory;
import com.alpharamen.customer.viewmodel.NotificationFragmentViewModel;
import com.alpharamen.customer.viewmodel.NotificationFragmentViewModel_Factory;
import com.alpharamen.customer.viewmodel.NotificationViewModel;
import com.alpharamen.customer.viewmodel.NotificationViewModel_Factory;
import com.alpharamen.customer.viewmodel.OfferDetailViewModel;
import com.alpharamen.customer.viewmodel.OfferDetailViewModel_Factory;
import com.alpharamen.customer.viewmodel.OffersViewModel;
import com.alpharamen.customer.viewmodel.OffersViewModel_Factory;
import com.alpharamen.customer.viewmodel.OnboardViewModel;
import com.alpharamen.customer.viewmodel.OnboardViewModel_Factory;
import com.alpharamen.customer.viewmodel.PaymentViewModel;
import com.alpharamen.customer.viewmodel.PaymentViewModel_Factory;
import com.alpharamen.customer.viewmodel.ProfileViewModel;
import com.alpharamen.customer.viewmodel.ProfileViewModel_Factory;
import com.alpharamen.customer.viewmodel.SearchViewModel;
import com.alpharamen.customer.viewmodel.SearchViewModel_Factory;
import com.alpharamen.customer.viewmodel.SignupViewModel;
import com.alpharamen.customer.viewmodel.SignupViewModel_Factory;
import com.alpharamen.customer.viewmodel.SplashViewModel;
import com.alpharamen.customer.viewmodel.SplashViewModel_Factory;
import com.alpharamen.customer.viewmodel.TrackItemViewModel;
import com.alpharamen.customer.viewmodel.TrackItemViewModel_Factory;
import com.google.common.collect.ImmutableMap;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Map;
import javax.inject.Provider;

public final class DaggerApplicationComponent implements ApplicationComponent {
  private ApplicationModule applicationModule;

  private Provider<FragmentProvider_FoodItemListFragment.FoodItemListFragmentSubcomponent.Builder>
      foodItemListFragmentSubcomponentBuilderProvider;

  private Provider<FragmentProvider_BindProfileFragment.ProfileFragmentSubcomponent.Builder>
      profileFragmentSubcomponentBuilderProvider;

  private Provider<FragmentProvider_BindForgotPasswordFragment.CartFragmentSubcomponent.Builder>
      cartFragmentSubcomponentBuilderProvider;

  private Provider<FragmentProvider_BottomSheetFragment.BottomFragmentSubcomponent.Builder>
      bottomFragmentSubcomponentBuilderProvider;

  private Provider<FragmentProvider_HubsListFragment.HubsListFragmentSubcomponent.Builder>
      hubsListFragmentSubcomponentBuilderProvider;

  private Provider<FragmentProvider_OffersFragment.OffersFragmentSubcomponent.Builder>
      offersFragmentSubcomponentBuilderProvider;

  private Provider<FragmentProvider_NotificationFragment.NotificationFragmentSubcomponent.Builder>
      notificationFragmentSubcomponentBuilderProvider;

  private Provider<FragmentProvider_SearchItemFragment.SearchItemFragmentSubcomponent.Builder>
      searchItemFragmentSubcomponentBuilderProvider;

  private Provider<ActivityProvider_BindHomeActivity.HomeActivitySubcomponent.Builder>
      homeActivitySubcomponentBuilderProvider;

  private Provider<ActivityProvider_BindSplashActivity.SplashActivitySubcomponent.Builder>
      splashActivitySubcomponentBuilderProvider;

  private Provider<
          ActivityProvider_BindNotificationActivity.NotificationActivitySubcomponent.Builder>
      notificationActivitySubcomponentBuilderProvider;

  private Provider<ActivityProvider_BindLoginActivity.LoginActivitySubcomponent.Builder>
      loginActivitySubcomponentBuilderProvider;

  private Provider<ActivityProvider_BindSignupActivity.SignupActivitySubcomponent.Builder>
      signupActivitySubcomponentBuilderProvider;

  private Provider<ActivityProvider_OnboardActivity.OnboardActivitySubcomponent.Builder>
      onboardActivitySubcomponentBuilderProvider;

  private Provider<ActivityProvider_FoodDetailActivity.FoodDetailActivitySubcomponent.Builder>
      foodDetailActivitySubcomponentBuilderProvider;

  private Provider<ActivityProvider_DetailHubActivity.DetailHubActivitySubcomponent.Builder>
      detailHubActivitySubcomponentBuilderProvider;

  private Provider<ActivityProvider_OfferDetailActivity.OfferDetailActivitySubcomponent.Builder>
      offerDetailActivitySubcomponentBuilderProvider;

  private Provider<ActivityProvider_PaymentActivity.OrderPlacedActivitySubcomponent.Builder>
      orderPlacedActivitySubcomponentBuilderProvider;

  private Provider<ActivityProvider_EditProfileActivity.EditProfileActivitySubcomponent.Builder>
      editProfileActivitySubcomponentBuilderProvider;

  private Provider<
          ActivityProvider_ChangeLocationActivity.ChangeLocationActivitySubcomponent.Builder>
      changeLocationActivitySubcomponentBuilderProvider;

  private Provider<ActivityProvider_MyOrdersActivity.MyOrdersActivitySubcomponent.Builder>
      myOrdersActivitySubcomponentBuilderProvider;

  private Provider<ActivityProvider_AboutUsActivity.AboutUsActivitySubcomponent.Builder>
      aboutUsActivitySubcomponentBuilderProvider;

  private Provider<ActivityProvider_ChangeAddressActivity.ChangeAddressActivitySubcomponent.Builder>
      changeAddressActivitySubcomponentBuilderProvider;

  private Provider<ActivityProvider_FilterActivity.FilterActivitySubcomponent.Builder>
      filterActivitySubcomponentBuilderProvider;

  private Provider<ActivityProvider_FilterResultActivity.FilterResultActivitySubcomponent.Builder>
      filterResultActivitySubcomponentBuilderProvider;

  private Provider<ActivityProvider_TrackItemActivity.TrackItemActivitySubcomponent.Builder>
      trackItemActivitySubcomponentBuilderProvider;

  private Provider<ActivityProvider_AddressListActivity.AddressListActivitySubcomponent.Builder>
      addressListActivitySubcomponentBuilderProvider;

  private Provider<WebService> webServiceProvider;

  private ApplicationModule_ProvideContextFactory provideContextProvider;

  private Provider<PreferencesHandler> preferencesHandlerProvider;

  private Provider<InternetUtils> internetUtilsProvider;

  private Provider<MusicDbHelper> musicDbHelperProvider;

  private Provider<FoodRepository> foodRepositoryProvider;

  private Provider<HomeViewModel> homeViewModelProvider;

  private Provider<SplashViewModel> splashViewModelProvider;

  private Provider<ProfileViewModel> profileViewModelProvider;

  private Provider<NotificationViewModel> notificationViewModelProvider;

  private Provider<LoginViewModel> loginViewModelProvider;

  private Provider<SignupViewModel> signupViewModelProvider;

  private Provider<CartViewModel> cartViewModelProvider;

  private SearchViewModel_Factory searchViewModelProvider;

  private AddressListViewModel_Factory addressListViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>>
      mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<ToastUtils> toastUtilsProvider;

  private DaggerApplicationComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return ImmutableMap.<Class<?>, Provider<AndroidInjector.Factory<?>>>builder()
        .put(FoodItemListFragment.class, (Provider) foodItemListFragmentSubcomponentBuilderProvider)
        .put(ProfileFragment.class, (Provider) profileFragmentSubcomponentBuilderProvider)
        .put(CartFragment.class, (Provider) cartFragmentSubcomponentBuilderProvider)
        .put(BottomFragment.class, (Provider) bottomFragmentSubcomponentBuilderProvider)
        .put(HubsListFragment.class, (Provider) hubsListFragmentSubcomponentBuilderProvider)
        .put(OffersFragment.class, (Provider) offersFragmentSubcomponentBuilderProvider)
        .put(NotificationFragment.class, (Provider) notificationFragmentSubcomponentBuilderProvider)
        .put(SearchItemFragment.class, (Provider) searchItemFragmentSubcomponentBuilderProvider)
        .put(HomeActivity.class, (Provider) homeActivitySubcomponentBuilderProvider)
        .put(SplashActivity.class, (Provider) splashActivitySubcomponentBuilderProvider)
        .put(NotificationActivity.class, (Provider) notificationActivitySubcomponentBuilderProvider)
        .put(LoginActivity.class, (Provider) loginActivitySubcomponentBuilderProvider)
        .put(SignupActivity.class, (Provider) signupActivitySubcomponentBuilderProvider)
        .put(OnboardActivity.class, (Provider) onboardActivitySubcomponentBuilderProvider)
        .put(FoodDetailActivity.class, (Provider) foodDetailActivitySubcomponentBuilderProvider)
        .put(DetailHubActivity.class, (Provider) detailHubActivitySubcomponentBuilderProvider)
        .put(OfferDetailActivity.class, (Provider) offerDetailActivitySubcomponentBuilderProvider)
        .put(OrderPlacedActivity.class, (Provider) orderPlacedActivitySubcomponentBuilderProvider)
        .put(EditProfileActivity.class, (Provider) editProfileActivitySubcomponentBuilderProvider)
        .put(
            ChangeLocationActivity.class,
            (Provider) changeLocationActivitySubcomponentBuilderProvider)
        .put(MyOrdersActivity.class, (Provider) myOrdersActivitySubcomponentBuilderProvider)
        .put(AboutUsActivity.class, (Provider) aboutUsActivitySubcomponentBuilderProvider)
        .put(
            ChangeAddressActivity.class,
            (Provider) changeAddressActivitySubcomponentBuilderProvider)
        .put(FilterActivity.class, (Provider) filterActivitySubcomponentBuilderProvider)
        .put(FilterResultActivity.class, (Provider) filterResultActivitySubcomponentBuilderProvider)
        .put(TrackItemActivity.class, (Provider) trackItemActivitySubcomponentBuilderProvider)
        .put(AddressListActivity.class, (Provider) addressListActivitySubcomponentBuilderProvider)
        .build();
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf(),
        ImmutableMap.<String, Provider<AndroidInjector.Factory<?>>>of(),
        ImmutableMap
            .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>of(),
        ImmutableMap.<String, Provider<AndroidInjector.Factory<? extends Activity>>>of());
  }

  private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf(),
        ImmutableMap.<String, Provider<AndroidInjector.Factory<?>>>of(),
        ImmutableMap
            .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>of(),
        ImmutableMap.<String, Provider<AndroidInjector.Factory<? extends Fragment>>>of());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.foodItemListFragmentSubcomponentBuilderProvider =
        new Provider<
            FragmentProvider_FoodItemListFragment.FoodItemListFragmentSubcomponent.Builder>() {
          @Override
          public FragmentProvider_FoodItemListFragment.FoodItemListFragmentSubcomponent.Builder
              get() {
            return new FoodItemListFragmentSubcomponentBuilder();
          }
        };
    this.profileFragmentSubcomponentBuilderProvider =
        new Provider<FragmentProvider_BindProfileFragment.ProfileFragmentSubcomponent.Builder>() {
          @Override
          public FragmentProvider_BindProfileFragment.ProfileFragmentSubcomponent.Builder get() {
            return new ProfileFragmentSubcomponentBuilder();
          }
        };
    this.cartFragmentSubcomponentBuilderProvider =
        new Provider<
            FragmentProvider_BindForgotPasswordFragment.CartFragmentSubcomponent.Builder>() {
          @Override
          public FragmentProvider_BindForgotPasswordFragment.CartFragmentSubcomponent.Builder
              get() {
            return new CartFragmentSubcomponentBuilder();
          }
        };
    this.bottomFragmentSubcomponentBuilderProvider =
        new Provider<FragmentProvider_BottomSheetFragment.BottomFragmentSubcomponent.Builder>() {
          @Override
          public FragmentProvider_BottomSheetFragment.BottomFragmentSubcomponent.Builder get() {
            return new BottomFragmentSubcomponentBuilder();
          }
        };
    this.hubsListFragmentSubcomponentBuilderProvider =
        new Provider<FragmentProvider_HubsListFragment.HubsListFragmentSubcomponent.Builder>() {
          @Override
          public FragmentProvider_HubsListFragment.HubsListFragmentSubcomponent.Builder get() {
            return new HubsListFragmentSubcomponentBuilder();
          }
        };
    this.offersFragmentSubcomponentBuilderProvider =
        new Provider<FragmentProvider_OffersFragment.OffersFragmentSubcomponent.Builder>() {
          @Override
          public FragmentProvider_OffersFragment.OffersFragmentSubcomponent.Builder get() {
            return new OffersFragmentSubcomponentBuilder();
          }
        };
    this.notificationFragmentSubcomponentBuilderProvider =
        new Provider<
            FragmentProvider_NotificationFragment.NotificationFragmentSubcomponent.Builder>() {
          @Override
          public FragmentProvider_NotificationFragment.NotificationFragmentSubcomponent.Builder
              get() {
            return new NotificationFragmentSubcomponentBuilder();
          }
        };
    this.searchItemFragmentSubcomponentBuilderProvider =
        new Provider<FragmentProvider_SearchItemFragment.SearchItemFragmentSubcomponent.Builder>() {
          @Override
          public FragmentProvider_SearchItemFragment.SearchItemFragmentSubcomponent.Builder get() {
            return new SearchItemFragmentSubcomponentBuilder();
          }
        };
    this.homeActivitySubcomponentBuilderProvider =
        new Provider<ActivityProvider_BindHomeActivity.HomeActivitySubcomponent.Builder>() {
          @Override
          public ActivityProvider_BindHomeActivity.HomeActivitySubcomponent.Builder get() {
            return new HomeActivitySubcomponentBuilder();
          }
        };
    this.splashActivitySubcomponentBuilderProvider =
        new Provider<ActivityProvider_BindSplashActivity.SplashActivitySubcomponent.Builder>() {
          @Override
          public ActivityProvider_BindSplashActivity.SplashActivitySubcomponent.Builder get() {
            return new SplashActivitySubcomponentBuilder();
          }
        };
    this.notificationActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityProvider_BindNotificationActivity.NotificationActivitySubcomponent.Builder>() {
          @Override
          public ActivityProvider_BindNotificationActivity.NotificationActivitySubcomponent.Builder
              get() {
            return new NotificationActivitySubcomponentBuilder();
          }
        };
    this.loginActivitySubcomponentBuilderProvider =
        new Provider<ActivityProvider_BindLoginActivity.LoginActivitySubcomponent.Builder>() {
          @Override
          public ActivityProvider_BindLoginActivity.LoginActivitySubcomponent.Builder get() {
            return new LoginActivitySubcomponentBuilder();
          }
        };
    this.signupActivitySubcomponentBuilderProvider =
        new Provider<ActivityProvider_BindSignupActivity.SignupActivitySubcomponent.Builder>() {
          @Override
          public ActivityProvider_BindSignupActivity.SignupActivitySubcomponent.Builder get() {
            return new SignupActivitySubcomponentBuilder();
          }
        };
    this.onboardActivitySubcomponentBuilderProvider =
        new Provider<ActivityProvider_OnboardActivity.OnboardActivitySubcomponent.Builder>() {
          @Override
          public ActivityProvider_OnboardActivity.OnboardActivitySubcomponent.Builder get() {
            return new OnboardActivitySubcomponentBuilder();
          }
        };
    this.foodDetailActivitySubcomponentBuilderProvider =
        new Provider<ActivityProvider_FoodDetailActivity.FoodDetailActivitySubcomponent.Builder>() {
          @Override
          public ActivityProvider_FoodDetailActivity.FoodDetailActivitySubcomponent.Builder get() {
            return new FoodDetailActivitySubcomponentBuilder();
          }
        };
    this.detailHubActivitySubcomponentBuilderProvider =
        new Provider<ActivityProvider_DetailHubActivity.DetailHubActivitySubcomponent.Builder>() {
          @Override
          public ActivityProvider_DetailHubActivity.DetailHubActivitySubcomponent.Builder get() {
            return new DetailHubActivitySubcomponentBuilder();
          }
        };
    this.offerDetailActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityProvider_OfferDetailActivity.OfferDetailActivitySubcomponent.Builder>() {
          @Override
          public ActivityProvider_OfferDetailActivity.OfferDetailActivitySubcomponent.Builder
              get() {
            return new OfferDetailActivitySubcomponentBuilder();
          }
        };
    this.orderPlacedActivitySubcomponentBuilderProvider =
        new Provider<ActivityProvider_PaymentActivity.OrderPlacedActivitySubcomponent.Builder>() {
          @Override
          public ActivityProvider_PaymentActivity.OrderPlacedActivitySubcomponent.Builder get() {
            return new OrderPlacedActivitySubcomponentBuilder();
          }
        };
    this.editProfileActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityProvider_EditProfileActivity.EditProfileActivitySubcomponent.Builder>() {
          @Override
          public ActivityProvider_EditProfileActivity.EditProfileActivitySubcomponent.Builder
              get() {
            return new EditProfileActivitySubcomponentBuilder();
          }
        };
    this.changeLocationActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityProvider_ChangeLocationActivity.ChangeLocationActivitySubcomponent.Builder>() {
          @Override
          public ActivityProvider_ChangeLocationActivity.ChangeLocationActivitySubcomponent.Builder
              get() {
            return new ChangeLocationActivitySubcomponentBuilder();
          }
        };
    this.myOrdersActivitySubcomponentBuilderProvider =
        new Provider<ActivityProvider_MyOrdersActivity.MyOrdersActivitySubcomponent.Builder>() {
          @Override
          public ActivityProvider_MyOrdersActivity.MyOrdersActivitySubcomponent.Builder get() {
            return new MyOrdersActivitySubcomponentBuilder();
          }
        };
    this.aboutUsActivitySubcomponentBuilderProvider =
        new Provider<ActivityProvider_AboutUsActivity.AboutUsActivitySubcomponent.Builder>() {
          @Override
          public ActivityProvider_AboutUsActivity.AboutUsActivitySubcomponent.Builder get() {
            return new AboutUsActivitySubcomponentBuilder();
          }
        };
    this.changeAddressActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityProvider_ChangeAddressActivity.ChangeAddressActivitySubcomponent.Builder>() {
          @Override
          public ActivityProvider_ChangeAddressActivity.ChangeAddressActivitySubcomponent.Builder
              get() {
            return new ChangeAddressActivitySubcomponentBuilder();
          }
        };
    this.filterActivitySubcomponentBuilderProvider =
        new Provider<ActivityProvider_FilterActivity.FilterActivitySubcomponent.Builder>() {
          @Override
          public ActivityProvider_FilterActivity.FilterActivitySubcomponent.Builder get() {
            return new FilterActivitySubcomponentBuilder();
          }
        };
    this.filterResultActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityProvider_FilterResultActivity.FilterResultActivitySubcomponent.Builder>() {
          @Override
          public ActivityProvider_FilterResultActivity.FilterResultActivitySubcomponent.Builder
              get() {
            return new FilterResultActivitySubcomponentBuilder();
          }
        };
    this.trackItemActivitySubcomponentBuilderProvider =
        new Provider<ActivityProvider_TrackItemActivity.TrackItemActivitySubcomponent.Builder>() {
          @Override
          public ActivityProvider_TrackItemActivity.TrackItemActivitySubcomponent.Builder get() {
            return new TrackItemActivitySubcomponentBuilder();
          }
        };
    this.addressListActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityProvider_AddressListActivity.AddressListActivitySubcomponent.Builder>() {
          @Override
          public ActivityProvider_AddressListActivity.AddressListActivitySubcomponent.Builder
              get() {
            return new AddressListActivitySubcomponentBuilder();
          }
        };
    this.applicationModule = builder.applicationModule;
    this.webServiceProvider = DoubleCheck.provider(WebService_Factory.create());
    this.provideContextProvider =
        ApplicationModule_ProvideContextFactory.create(builder.applicationModule);
    this.preferencesHandlerProvider =
        DoubleCheck.provider(PreferencesHandler_Factory.create(provideContextProvider));
    this.internetUtilsProvider =
        DoubleCheck.provider(InternetUtils_Factory.create(provideContextProvider));
    this.musicDbHelperProvider =
        DoubleCheck.provider(MusicDbHelper_Factory.create(provideContextProvider));
    this.foodRepositoryProvider =
        DoubleCheck.provider(
            FoodRepository_Factory.create(
                preferencesHandlerProvider, webServiceProvider, musicDbHelperProvider));
    this.homeViewModelProvider =
        DoubleCheck.provider(
            HomeViewModel_Factory.create(foodRepositoryProvider, internetUtilsProvider));
    this.splashViewModelProvider =
        DoubleCheck.provider(
            SplashViewModel_Factory.create(foodRepositoryProvider, internetUtilsProvider));
    this.profileViewModelProvider =
        DoubleCheck.provider(
            ProfileViewModel_Factory.create(foodRepositoryProvider, internetUtilsProvider));
    this.notificationViewModelProvider =
        DoubleCheck.provider(
            NotificationViewModel_Factory.create(foodRepositoryProvider, internetUtilsProvider));
    this.loginViewModelProvider =
        DoubleCheck.provider(
            LoginViewModel_Factory.create(foodRepositoryProvider, internetUtilsProvider));
    this.signupViewModelProvider =
        DoubleCheck.provider(
            SignupViewModel_Factory.create(foodRepositoryProvider, internetUtilsProvider));
    this.cartViewModelProvider =
        DoubleCheck.provider(
            CartViewModel_Factory.create(foodRepositoryProvider, internetUtilsProvider));
    this.searchViewModelProvider = SearchViewModel_Factory.create(foodRepositoryProvider);
    this.addressListViewModelProvider = AddressListViewModel_Factory.create(foodRepositoryProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider =
        MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(26)
            .put(HomeViewModel.class, (Provider) homeViewModelProvider)
            .put(SplashViewModel.class, (Provider) splashViewModelProvider)
            .put(ProfileViewModel.class, (Provider) profileViewModelProvider)
            .put(NotificationViewModel.class, (Provider) notificationViewModelProvider)
            .put(LoginViewModel.class, (Provider) loginViewModelProvider)
            .put(SignupViewModel.class, (Provider) signupViewModelProvider)
            .put(CartViewModel.class, (Provider) cartViewModelProvider)
            .put(OnboardViewModel.class, (Provider) OnboardViewModel_Factory.create())
            .put(FoodItemListViewModel.class, (Provider) FoodItemListViewModel_Factory.create())
            .put(HubListViewModel.class, (Provider) HubListViewModel_Factory.create())
            .put(OffersViewModel.class, (Provider) OffersViewModel_Factory.create())
            .put(
                NotificationFragmentViewModel.class,
                (Provider) NotificationFragmentViewModel_Factory.create())
            .put(FoodDetailViewModel.class, (Provider) FoodDetailViewModel_Factory.create())
            .put(DetailViewModel.class, (Provider) DetailViewModel_Factory.create())
            .put(OfferDetailViewModel.class, (Provider) OfferDetailViewModel_Factory.create())
            .put(PaymentViewModel.class, (Provider) PaymentViewModel_Factory.create())
            .put(EditProfileViewModel.class, (Provider) EditProfileViewModel_Factory.create())
            .put(ChangeLocationViewModel.class, (Provider) ChangeLocationViewModel_Factory.create())
            .put(MyOrdersViewModel.class, (Provider) MyOrdersViewModel_Factory.create())
            .put(AboutUsViewModel.class, (Provider) AboutUsViewModel_Factory.create())
            .put(ChangeAddressViewModel.class, (Provider) ChangeAddressViewModel_Factory.create())
            .put(FilterViewModel.class, (Provider) FilterViewModel_Factory.create())
            .put(FilterResultViewModel.class, (Provider) FilterResultViewModel_Factory.create())
            .put(SearchViewModel.class, (Provider) searchViewModelProvider)
            .put(TrackItemViewModel.class, (Provider) TrackItemViewModel_Factory.create())
            .put(AddressListViewModel.class, (Provider) addressListViewModelProvider)
            .build();
    this.toastUtilsProvider =
        DoubleCheck.provider(ToastUtils_Factory.create(provideContextProvider));
  }

  @Override
  public void inject(BaseApp app) {
    injectBaseApp(app);
  }

  @Override
  public Context getContext() {
    return ApplicationModule_ProvideContextFactory.proxyProvideContext(applicationModule);
  }

  @Override
  public Application getApplication() {
    return ApplicationModule_ProvideApplicationFactory.proxyProvideApplication(applicationModule);
  }

  @Override
  public WebService getWebService() {
    return webServiceProvider.get();
  }

  @Override
  public PreferencesHandler getPreferencesHandler() {
    return preferencesHandlerProvider.get();
  }

  @Override
  public InternetUtils getInternetUtils() {
    return internetUtilsProvider.get();
  }

  @Override
  public Map<Class<? extends ViewModel>, Provider<ViewModel>> creators() {
    return ImmutableMap.<Class<? extends ViewModel>, Provider<ViewModel>>builder()
        .put(HomeViewModel.class, (Provider) homeViewModelProvider)
        .put(SplashViewModel.class, (Provider) splashViewModelProvider)
        .put(ProfileViewModel.class, (Provider) profileViewModelProvider)
        .put(NotificationViewModel.class, (Provider) notificationViewModelProvider)
        .put(LoginViewModel.class, (Provider) loginViewModelProvider)
        .put(SignupViewModel.class, (Provider) signupViewModelProvider)
        .put(CartViewModel.class, (Provider) cartViewModelProvider)
        .put(OnboardViewModel.class, (Provider) OnboardViewModel_Factory.create())
        .put(FoodItemListViewModel.class, (Provider) FoodItemListViewModel_Factory.create())
        .put(HubListViewModel.class, (Provider) HubListViewModel_Factory.create())
        .put(OffersViewModel.class, (Provider) OffersViewModel_Factory.create())
        .put(
            NotificationFragmentViewModel.class,
            (Provider) NotificationFragmentViewModel_Factory.create())
        .put(FoodDetailViewModel.class, (Provider) FoodDetailViewModel_Factory.create())
        .put(DetailViewModel.class, (Provider) DetailViewModel_Factory.create())
        .put(OfferDetailViewModel.class, (Provider) OfferDetailViewModel_Factory.create())
        .put(PaymentViewModel.class, (Provider) PaymentViewModel_Factory.create())
        .put(EditProfileViewModel.class, (Provider) EditProfileViewModel_Factory.create())
        .put(ChangeLocationViewModel.class, (Provider) ChangeLocationViewModel_Factory.create())
        .put(MyOrdersViewModel.class, (Provider) MyOrdersViewModel_Factory.create())
        .put(AboutUsViewModel.class, (Provider) AboutUsViewModel_Factory.create())
        .put(ChangeAddressViewModel.class, (Provider) ChangeAddressViewModel_Factory.create())
        .put(FilterViewModel.class, (Provider) FilterViewModel_Factory.create())
        .put(FilterResultViewModel.class, (Provider) FilterResultViewModel_Factory.create())
        .put(SearchViewModel.class, (Provider) searchViewModelProvider)
        .put(TrackItemViewModel.class, (Provider) TrackItemViewModel_Factory.create())
        .put(AddressListViewModel.class, (Provider) addressListViewModelProvider)
        .build();
  }

  @Override
  public Map<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
      provideFragment() {
    return ImmutableMap
        .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>of();
  }

  @Override
  public Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
      provideActivity() {
    return ImmutableMap
        .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>of();
  }

  @CanIgnoreReturnValue
  private BaseApp injectBaseApp(BaseApp instance) {
    BaseApp_MembersInjector.injectMActivityInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    BaseApp_MembersInjector.injectMFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment());
    return instance;
  }

  public static final class Builder {
    private ApplicationModule applicationModule;

    private Builder() {}

    public ApplicationComponent build() {
      if (applicationModule == null) {
        throw new IllegalStateException(
            ApplicationModule.class.getCanonicalName() + " must be set");
      }
      return new DaggerApplicationComponent(this);
    }

    public Builder applicationModule(ApplicationModule applicationModule) {
      this.applicationModule = Preconditions.checkNotNull(applicationModule);
      return this;
    }
  }

  private final class FoodItemListFragmentSubcomponentBuilder
      extends FragmentProvider_FoodItemListFragment.FoodItemListFragmentSubcomponent.Builder {
    private FoodItemListFragment seedInstance;

    @Override
    public FragmentProvider_FoodItemListFragment.FoodItemListFragmentSubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            FoodItemListFragment.class.getCanonicalName() + " must be set");
      }
      return new FoodItemListFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(FoodItemListFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class FoodItemListFragmentSubcomponentImpl
      implements FragmentProvider_FoodItemListFragment.FoodItemListFragmentSubcomponent {
    private Provider<ViewModelProviderFactory> viewModelProviderFactoryProvider;

    private FoodItemListFragmentSubcomponentImpl(FoodItemListFragmentSubcomponentBuilder builder) {
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final FoodItemListFragmentSubcomponentBuilder builder) {
      this.viewModelProviderFactoryProvider =
          DoubleCheck.provider(
              ViewModelProviderFactory_Factory.create(
                  DaggerApplicationComponent.this.mapOfClassOfAndProviderOfViewModelProvider));
    }

    @Override
    public void inject(FoodItemListFragment arg0) {
      injectFoodItemListFragment(arg0);
    }

    @CanIgnoreReturnValue
    private FoodItemListFragment injectFoodItemListFragment(FoodItemListFragment instance) {
      FoodItemListFragment_MembersInjector.injectMVviewModelFactory(
          instance, viewModelProviderFactoryProvider.get());
      return instance;
    }
  }

  private final class ProfileFragmentSubcomponentBuilder
      extends FragmentProvider_BindProfileFragment.ProfileFragmentSubcomponent.Builder {
    private ProfileFragment seedInstance;

    @Override
    public FragmentProvider_BindProfileFragment.ProfileFragmentSubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(ProfileFragment.class.getCanonicalName() + " must be set");
      }
      return new ProfileFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(ProfileFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class ProfileFragmentSubcomponentImpl
      implements FragmentProvider_BindProfileFragment.ProfileFragmentSubcomponent {
    private Provider<ViewModelProviderFactory> viewModelProviderFactoryProvider;

    private ProfileFragmentSubcomponentImpl(ProfileFragmentSubcomponentBuilder builder) {
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProfileFragmentSubcomponentBuilder builder) {
      this.viewModelProviderFactoryProvider =
          DoubleCheck.provider(
              ViewModelProviderFactory_Factory.create(
                  DaggerApplicationComponent.this.mapOfClassOfAndProviderOfViewModelProvider));
    }

    @Override
    public void inject(ProfileFragment arg0) {
      injectProfileFragment(arg0);
    }

    @CanIgnoreReturnValue
    private ProfileFragment injectProfileFragment(ProfileFragment instance) {
      ProfileFragment_MembersInjector.injectMVviewModelFactory(
          instance, viewModelProviderFactoryProvider.get());
      return instance;
    }
  }

  private final class CartFragmentSubcomponentBuilder
      extends FragmentProvider_BindForgotPasswordFragment.CartFragmentSubcomponent.Builder {
    private CartFragment seedInstance;

    @Override
    public FragmentProvider_BindForgotPasswordFragment.CartFragmentSubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(CartFragment.class.getCanonicalName() + " must be set");
      }
      return new CartFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(CartFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class CartFragmentSubcomponentImpl
      implements FragmentProvider_BindForgotPasswordFragment.CartFragmentSubcomponent {
    private Provider<ViewModelProviderFactory> viewModelProviderFactoryProvider;

    private CartFragmentSubcomponentImpl(CartFragmentSubcomponentBuilder builder) {
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CartFragmentSubcomponentBuilder builder) {
      this.viewModelProviderFactoryProvider =
          DoubleCheck.provider(
              ViewModelProviderFactory_Factory.create(
                  DaggerApplicationComponent.this.mapOfClassOfAndProviderOfViewModelProvider));
    }

    @Override
    public void inject(CartFragment arg0) {
      injectCartFragment(arg0);
    }

    @CanIgnoreReturnValue
    private CartFragment injectCartFragment(CartFragment instance) {
      CartFragment_MembersInjector.injectMVviewModelFactory(
          instance, viewModelProviderFactoryProvider.get());
      return instance;
    }
  }

  private final class BottomFragmentSubcomponentBuilder
      extends FragmentProvider_BottomSheetFragment.BottomFragmentSubcomponent.Builder {
    private BottomFragment seedInstance;

    @Override
    public FragmentProvider_BottomSheetFragment.BottomFragmentSubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(BottomFragment.class.getCanonicalName() + " must be set");
      }
      return new BottomFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(BottomFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class BottomFragmentSubcomponentImpl
      implements FragmentProvider_BottomSheetFragment.BottomFragmentSubcomponent {
    private BottomFragmentSubcomponentImpl(BottomFragmentSubcomponentBuilder builder) {}

    @Override
    public void inject(BottomFragment arg0) {}
  }

  private final class HubsListFragmentSubcomponentBuilder
      extends FragmentProvider_HubsListFragment.HubsListFragmentSubcomponent.Builder {
    private HubsListFragment seedInstance;

    @Override
    public FragmentProvider_HubsListFragment.HubsListFragmentSubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(HubsListFragment.class.getCanonicalName() + " must be set");
      }
      return new HubsListFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(HubsListFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class HubsListFragmentSubcomponentImpl
      implements FragmentProvider_HubsListFragment.HubsListFragmentSubcomponent {
    private Provider<ViewModelProviderFactory> viewModelProviderFactoryProvider;

    private HubsListFragmentSubcomponentImpl(HubsListFragmentSubcomponentBuilder builder) {
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final HubsListFragmentSubcomponentBuilder builder) {
      this.viewModelProviderFactoryProvider =
          DoubleCheck.provider(
              ViewModelProviderFactory_Factory.create(
                  DaggerApplicationComponent.this.mapOfClassOfAndProviderOfViewModelProvider));
    }

    @Override
    public void inject(HubsListFragment arg0) {
      injectHubsListFragment(arg0);
    }

    @CanIgnoreReturnValue
    private HubsListFragment injectHubsListFragment(HubsListFragment instance) {
      HubsListFragment_MembersInjector.injectMVviewModelFactory(
          instance, viewModelProviderFactoryProvider.get());
      return instance;
    }
  }

  private final class OffersFragmentSubcomponentBuilder
      extends FragmentProvider_OffersFragment.OffersFragmentSubcomponent.Builder {
    private OffersFragment seedInstance;

    @Override
    public FragmentProvider_OffersFragment.OffersFragmentSubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(OffersFragment.class.getCanonicalName() + " must be set");
      }
      return new OffersFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(OffersFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class OffersFragmentSubcomponentImpl
      implements FragmentProvider_OffersFragment.OffersFragmentSubcomponent {
    private Provider<ViewModelProviderFactory> viewModelProviderFactoryProvider;

    private OffersFragmentSubcomponentImpl(OffersFragmentSubcomponentBuilder builder) {
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final OffersFragmentSubcomponentBuilder builder) {
      this.viewModelProviderFactoryProvider =
          DoubleCheck.provider(
              ViewModelProviderFactory_Factory.create(
                  DaggerApplicationComponent.this.mapOfClassOfAndProviderOfViewModelProvider));
    }

    @Override
    public void inject(OffersFragment arg0) {
      injectOffersFragment(arg0);
    }

    @CanIgnoreReturnValue
    private OffersFragment injectOffersFragment(OffersFragment instance) {
      OffersFragment_MembersInjector.injectMVviewModelFactory(
          instance, viewModelProviderFactoryProvider.get());
      return instance;
    }
  }

  private final class NotificationFragmentSubcomponentBuilder
      extends FragmentProvider_NotificationFragment.NotificationFragmentSubcomponent.Builder {
    private NotificationFragment seedInstance;

    @Override
    public FragmentProvider_NotificationFragment.NotificationFragmentSubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            NotificationFragment.class.getCanonicalName() + " must be set");
      }
      return new NotificationFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(NotificationFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class NotificationFragmentSubcomponentImpl
      implements FragmentProvider_NotificationFragment.NotificationFragmentSubcomponent {
    private Provider<ViewModelProviderFactory> viewModelProviderFactoryProvider;

    private NotificationFragmentSubcomponentImpl(NotificationFragmentSubcomponentBuilder builder) {
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final NotificationFragmentSubcomponentBuilder builder) {
      this.viewModelProviderFactoryProvider =
          DoubleCheck.provider(
              ViewModelProviderFactory_Factory.create(
                  DaggerApplicationComponent.this.mapOfClassOfAndProviderOfViewModelProvider));
    }

    @Override
    public void inject(NotificationFragment arg0) {
      injectNotificationFragment(arg0);
    }

    @CanIgnoreReturnValue
    private NotificationFragment injectNotificationFragment(NotificationFragment instance) {
      NotificationFragment_MembersInjector.injectMVviewModelFactory(
          instance, viewModelProviderFactoryProvider.get());
      return instance;
    }
  }

  private final class SearchItemFragmentSubcomponentBuilder
      extends FragmentProvider_SearchItemFragment.SearchItemFragmentSubcomponent.Builder {
    private SearchItemFragment seedInstance;

    @Override
    public FragmentProvider_SearchItemFragment.SearchItemFragmentSubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            SearchItemFragment.class.getCanonicalName() + " must be set");
      }
      return new SearchItemFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(SearchItemFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class SearchItemFragmentSubcomponentImpl
      implements FragmentProvider_SearchItemFragment.SearchItemFragmentSubcomponent {
    private Provider<ViewModelProviderFactory> viewModelProviderFactoryProvider;

    private SearchItemFragmentSubcomponentImpl(SearchItemFragmentSubcomponentBuilder builder) {
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SearchItemFragmentSubcomponentBuilder builder) {
      this.viewModelProviderFactoryProvider =
          DoubleCheck.provider(
              ViewModelProviderFactory_Factory.create(
                  DaggerApplicationComponent.this.mapOfClassOfAndProviderOfViewModelProvider));
    }

    @Override
    public void inject(SearchItemFragment arg0) {
      injectSearchItemFragment(arg0);
    }

    @CanIgnoreReturnValue
    private SearchItemFragment injectSearchItemFragment(SearchItemFragment instance) {
      SearchItemFragment_MembersInjector.injectViewModelProviderFactory(
          instance, viewModelProviderFactoryProvider.get());
      return instance;
    }
  }

  private final class HomeActivitySubcomponentBuilder
      extends ActivityProvider_BindHomeActivity.HomeActivitySubcomponent.Builder {
    private HomeActivity seedInstance;

    @Override
    public ActivityProvider_BindHomeActivity.HomeActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(HomeActivity.class.getCanonicalName() + " must be set");
      }
      return new HomeActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(HomeActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class HomeActivitySubcomponentImpl
      implements ActivityProvider_BindHomeActivity.HomeActivitySubcomponent {
    private Provider<ViewModelProviderFactory> viewModelProviderFactoryProvider;

    private HomeActivitySubcomponentImpl(HomeActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final HomeActivitySubcomponentBuilder builder) {
      this.viewModelProviderFactoryProvider =
          DoubleCheck.provider(
              ViewModelProviderFactory_Factory.create(
                  DaggerApplicationComponent.this.mapOfClassOfAndProviderOfViewModelProvider));
    }

    @Override
    public void inject(HomeActivity arg0) {
      injectHomeActivity(arg0);
    }

    @CanIgnoreReturnValue
    private HomeActivity injectHomeActivity(HomeActivity instance) {
      BaseActivity_MembersInjector.injectToastUtils(
          instance, DaggerApplicationComponent.this.toastUtilsProvider.get());
      HomeActivity_MembersInjector.injectMViewModelFactory(
          instance, viewModelProviderFactoryProvider.get());
      HomeActivity_MembersInjector.injectDispatchingInjector(
          instance, DaggerApplicationComponent.this.getDispatchingAndroidInjectorOfFragment());
      return instance;
    }
  }

  private final class SplashActivitySubcomponentBuilder
      extends ActivityProvider_BindSplashActivity.SplashActivitySubcomponent.Builder {
    private SplashActivity seedInstance;

    @Override
    public ActivityProvider_BindSplashActivity.SplashActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(SplashActivity.class.getCanonicalName() + " must be set");
      }
      return new SplashActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(SplashActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class SplashActivitySubcomponentImpl
      implements ActivityProvider_BindSplashActivity.SplashActivitySubcomponent {
    private Provider<ViewModelProviderFactory> viewModelProviderFactoryProvider;

    private SplashActivitySubcomponentImpl(SplashActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SplashActivitySubcomponentBuilder builder) {
      this.viewModelProviderFactoryProvider =
          DoubleCheck.provider(
              ViewModelProviderFactory_Factory.create(
                  DaggerApplicationComponent.this.mapOfClassOfAndProviderOfViewModelProvider));
    }

    @Override
    public void inject(SplashActivity arg0) {
      injectSplashActivity(arg0);
    }

    @CanIgnoreReturnValue
    private SplashActivity injectSplashActivity(SplashActivity instance) {
      BaseActivity_MembersInjector.injectToastUtils(
          instance, DaggerApplicationComponent.this.toastUtilsProvider.get());
      SplashActivity_MembersInjector.injectMViewModelFactory(
          instance, viewModelProviderFactoryProvider.get());
      return instance;
    }
  }

  private final class NotificationActivitySubcomponentBuilder
      extends ActivityProvider_BindNotificationActivity.NotificationActivitySubcomponent.Builder {
    private NotificationActivity seedInstance;

    @Override
    public ActivityProvider_BindNotificationActivity.NotificationActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            NotificationActivity.class.getCanonicalName() + " must be set");
      }
      return new NotificationActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(NotificationActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class NotificationActivitySubcomponentImpl
      implements ActivityProvider_BindNotificationActivity.NotificationActivitySubcomponent {
    private Provider<ViewModelProviderFactory> viewModelProviderFactoryProvider;

    private NotificationActivitySubcomponentImpl(NotificationActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final NotificationActivitySubcomponentBuilder builder) {
      this.viewModelProviderFactoryProvider =
          DoubleCheck.provider(
              ViewModelProviderFactory_Factory.create(
                  DaggerApplicationComponent.this.mapOfClassOfAndProviderOfViewModelProvider));
    }

    @Override
    public void inject(NotificationActivity arg0) {
      injectNotificationActivity(arg0);
    }

    @CanIgnoreReturnValue
    private NotificationActivity injectNotificationActivity(NotificationActivity instance) {
      BaseActivity_MembersInjector.injectToastUtils(
          instance, DaggerApplicationComponent.this.toastUtilsProvider.get());
      NotificationActivity_MembersInjector.injectMViewModelFactory(
          instance, viewModelProviderFactoryProvider.get());
      return instance;
    }
  }

  private final class LoginActivitySubcomponentBuilder
      extends ActivityProvider_BindLoginActivity.LoginActivitySubcomponent.Builder {
    private LoginActivity seedInstance;

    @Override
    public ActivityProvider_BindLoginActivity.LoginActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(LoginActivity.class.getCanonicalName() + " must be set");
      }
      return new LoginActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(LoginActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class LoginActivitySubcomponentImpl
      implements ActivityProvider_BindLoginActivity.LoginActivitySubcomponent {
    private Provider<ViewModelProviderFactory> viewModelProviderFactoryProvider;

    private LoginActivitySubcomponentImpl(LoginActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final LoginActivitySubcomponentBuilder builder) {
      this.viewModelProviderFactoryProvider =
          DoubleCheck.provider(
              ViewModelProviderFactory_Factory.create(
                  DaggerApplicationComponent.this.mapOfClassOfAndProviderOfViewModelProvider));
    }

    @Override
    public void inject(LoginActivity arg0) {
      injectLoginActivity(arg0);
    }

    @CanIgnoreReturnValue
    private LoginActivity injectLoginActivity(LoginActivity instance) {
      BaseActivity_MembersInjector.injectToastUtils(
          instance, DaggerApplicationComponent.this.toastUtilsProvider.get());
      LoginActivity_MembersInjector.injectMViewModelFactory(
          instance, viewModelProviderFactoryProvider.get());
      return instance;
    }
  }

  private final class SignupActivitySubcomponentBuilder
      extends ActivityProvider_BindSignupActivity.SignupActivitySubcomponent.Builder {
    private SignupActivity seedInstance;

    @Override
    public ActivityProvider_BindSignupActivity.SignupActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(SignupActivity.class.getCanonicalName() + " must be set");
      }
      return new SignupActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(SignupActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class SignupActivitySubcomponentImpl
      implements ActivityProvider_BindSignupActivity.SignupActivitySubcomponent {
    private Provider<ViewModelProviderFactory> viewModelProviderFactoryProvider;

    private SignupActivitySubcomponentImpl(SignupActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SignupActivitySubcomponentBuilder builder) {
      this.viewModelProviderFactoryProvider =
          DoubleCheck.provider(
              ViewModelProviderFactory_Factory.create(
                  DaggerApplicationComponent.this.mapOfClassOfAndProviderOfViewModelProvider));
    }

    @Override
    public void inject(SignupActivity arg0) {
      injectSignupActivity(arg0);
    }

    @CanIgnoreReturnValue
    private SignupActivity injectSignupActivity(SignupActivity instance) {
      BaseActivity_MembersInjector.injectToastUtils(
          instance, DaggerApplicationComponent.this.toastUtilsProvider.get());
      SignupActivity_MembersInjector.injectMViewModelFactory(
          instance, viewModelProviderFactoryProvider.get());
      return instance;
    }
  }

  private final class OnboardActivitySubcomponentBuilder
      extends ActivityProvider_OnboardActivity.OnboardActivitySubcomponent.Builder {
    private OnboardActivity seedInstance;

    @Override
    public ActivityProvider_OnboardActivity.OnboardActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(OnboardActivity.class.getCanonicalName() + " must be set");
      }
      return new OnboardActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(OnboardActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class OnboardActivitySubcomponentImpl
      implements ActivityProvider_OnboardActivity.OnboardActivitySubcomponent {
    private Provider<ViewModelProviderFactory> viewModelProviderFactoryProvider;

    private OnboardActivitySubcomponentImpl(OnboardActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final OnboardActivitySubcomponentBuilder builder) {
      this.viewModelProviderFactoryProvider =
          DoubleCheck.provider(
              ViewModelProviderFactory_Factory.create(
                  DaggerApplicationComponent.this.mapOfClassOfAndProviderOfViewModelProvider));
    }

    @Override
    public void inject(OnboardActivity arg0) {
      injectOnboardActivity(arg0);
    }

    @CanIgnoreReturnValue
    private OnboardActivity injectOnboardActivity(OnboardActivity instance) {
      BaseActivity_MembersInjector.injectToastUtils(
          instance, DaggerApplicationComponent.this.toastUtilsProvider.get());
      OnboardActivity_MembersInjector.injectMViewModelFactory(
          instance, viewModelProviderFactoryProvider.get());
      return instance;
    }
  }

  private final class FoodDetailActivitySubcomponentBuilder
      extends ActivityProvider_FoodDetailActivity.FoodDetailActivitySubcomponent.Builder {
    private FoodDetailActivity seedInstance;

    @Override
    public ActivityProvider_FoodDetailActivity.FoodDetailActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            FoodDetailActivity.class.getCanonicalName() + " must be set");
      }
      return new FoodDetailActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(FoodDetailActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class FoodDetailActivitySubcomponentImpl
      implements ActivityProvider_FoodDetailActivity.FoodDetailActivitySubcomponent {
    private FoodDetailActivitySubcomponentImpl(FoodDetailActivitySubcomponentBuilder builder) {}

    @Override
    public void inject(FoodDetailActivity arg0) {
      injectFoodDetailActivity(arg0);
    }

    @CanIgnoreReturnValue
    private FoodDetailActivity injectFoodDetailActivity(FoodDetailActivity instance) {
      BaseActivity_MembersInjector.injectToastUtils(
          instance, DaggerApplicationComponent.this.toastUtilsProvider.get());
      FoodDetailActivity_MembersInjector.injectFoodDetailViewModel(
          instance, new FoodDetailViewModel());
      return instance;
    }
  }

  private final class DetailHubActivitySubcomponentBuilder
      extends ActivityProvider_DetailHubActivity.DetailHubActivitySubcomponent.Builder {
    private DetailHubActivity seedInstance;

    @Override
    public ActivityProvider_DetailHubActivity.DetailHubActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            DetailHubActivity.class.getCanonicalName() + " must be set");
      }
      return new DetailHubActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(DetailHubActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class DetailHubActivitySubcomponentImpl
      implements ActivityProvider_DetailHubActivity.DetailHubActivitySubcomponent {
    private Provider<ViewModelProviderFactory> viewModelProviderFactoryProvider;

    private DetailHubActivitySubcomponentImpl(DetailHubActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final DetailHubActivitySubcomponentBuilder builder) {
      this.viewModelProviderFactoryProvider =
          DoubleCheck.provider(
              ViewModelProviderFactory_Factory.create(
                  DaggerApplicationComponent.this.mapOfClassOfAndProviderOfViewModelProvider));
    }

    @Override
    public void inject(DetailHubActivity arg0) {
      injectDetailHubActivity(arg0);
    }

    @CanIgnoreReturnValue
    private DetailHubActivity injectDetailHubActivity(DetailHubActivity instance) {
      BaseActivity_MembersInjector.injectToastUtils(
          instance, DaggerApplicationComponent.this.toastUtilsProvider.get());
      DetailHubActivity_MembersInjector.injectMViewModelFactory(
          instance, viewModelProviderFactoryProvider.get());
      return instance;
    }
  }

  private final class OfferDetailActivitySubcomponentBuilder
      extends ActivityProvider_OfferDetailActivity.OfferDetailActivitySubcomponent.Builder {
    private OfferDetailActivity seedInstance;

    @Override
    public ActivityProvider_OfferDetailActivity.OfferDetailActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            OfferDetailActivity.class.getCanonicalName() + " must be set");
      }
      return new OfferDetailActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(OfferDetailActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class OfferDetailActivitySubcomponentImpl
      implements ActivityProvider_OfferDetailActivity.OfferDetailActivitySubcomponent {
    private Provider<ViewModelProviderFactory> viewModelProviderFactoryProvider;

    private OfferDetailActivitySubcomponentImpl(OfferDetailActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final OfferDetailActivitySubcomponentBuilder builder) {
      this.viewModelProviderFactoryProvider =
          DoubleCheck.provider(
              ViewModelProviderFactory_Factory.create(
                  DaggerApplicationComponent.this.mapOfClassOfAndProviderOfViewModelProvider));
    }

    @Override
    public void inject(OfferDetailActivity arg0) {
      injectOfferDetailActivity(arg0);
    }

    @CanIgnoreReturnValue
    private OfferDetailActivity injectOfferDetailActivity(OfferDetailActivity instance) {
      BaseActivity_MembersInjector.injectToastUtils(
          instance, DaggerApplicationComponent.this.toastUtilsProvider.get());
      OfferDetailActivity_MembersInjector.injectMViewModelFactory(
          instance, viewModelProviderFactoryProvider.get());
      return instance;
    }
  }

  private final class OrderPlacedActivitySubcomponentBuilder
      extends ActivityProvider_PaymentActivity.OrderPlacedActivitySubcomponent.Builder {
    private OrderPlacedActivity seedInstance;

    @Override
    public ActivityProvider_PaymentActivity.OrderPlacedActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            OrderPlacedActivity.class.getCanonicalName() + " must be set");
      }
      return new OrderPlacedActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(OrderPlacedActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class OrderPlacedActivitySubcomponentImpl
      implements ActivityProvider_PaymentActivity.OrderPlacedActivitySubcomponent {
    private Provider<ViewModelProviderFactory> viewModelProviderFactoryProvider;

    private OrderPlacedActivitySubcomponentImpl(OrderPlacedActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final OrderPlacedActivitySubcomponentBuilder builder) {
      this.viewModelProviderFactoryProvider =
          DoubleCheck.provider(
              ViewModelProviderFactory_Factory.create(
                  DaggerApplicationComponent.this.mapOfClassOfAndProviderOfViewModelProvider));
    }

    @Override
    public void inject(OrderPlacedActivity arg0) {
      injectOrderPlacedActivity(arg0);
    }

    @CanIgnoreReturnValue
    private OrderPlacedActivity injectOrderPlacedActivity(OrderPlacedActivity instance) {
      BaseActivity_MembersInjector.injectToastUtils(
          instance, DaggerApplicationComponent.this.toastUtilsProvider.get());
      OrderPlacedActivity_MembersInjector.injectMViewModelFactory(
          instance, viewModelProviderFactoryProvider.get());
      return instance;
    }
  }

  private final class EditProfileActivitySubcomponentBuilder
      extends ActivityProvider_EditProfileActivity.EditProfileActivitySubcomponent.Builder {
    private EditProfileActivity seedInstance;

    @Override
    public ActivityProvider_EditProfileActivity.EditProfileActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            EditProfileActivity.class.getCanonicalName() + " must be set");
      }
      return new EditProfileActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(EditProfileActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class EditProfileActivitySubcomponentImpl
      implements ActivityProvider_EditProfileActivity.EditProfileActivitySubcomponent {
    private Provider<ViewModelProviderFactory> viewModelProviderFactoryProvider;

    private EditProfileActivitySubcomponentImpl(EditProfileActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final EditProfileActivitySubcomponentBuilder builder) {
      this.viewModelProviderFactoryProvider =
          DoubleCheck.provider(
              ViewModelProviderFactory_Factory.create(
                  DaggerApplicationComponent.this.mapOfClassOfAndProviderOfViewModelProvider));
    }

    @Override
    public void inject(EditProfileActivity arg0) {
      injectEditProfileActivity(arg0);
    }

    @CanIgnoreReturnValue
    private EditProfileActivity injectEditProfileActivity(EditProfileActivity instance) {
      BaseActivity_MembersInjector.injectToastUtils(
          instance, DaggerApplicationComponent.this.toastUtilsProvider.get());
      EditProfileActivity_MembersInjector.injectMViewModelFactory(
          instance, viewModelProviderFactoryProvider.get());
      return instance;
    }
  }

  private final class ChangeLocationActivitySubcomponentBuilder
      extends ActivityProvider_ChangeLocationActivity.ChangeLocationActivitySubcomponent.Builder {
    private ChangeLocationActivity seedInstance;

    @Override
    public ActivityProvider_ChangeLocationActivity.ChangeLocationActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            ChangeLocationActivity.class.getCanonicalName() + " must be set");
      }
      return new ChangeLocationActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(ChangeLocationActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class ChangeLocationActivitySubcomponentImpl
      implements ActivityProvider_ChangeLocationActivity.ChangeLocationActivitySubcomponent {
    private Provider<ViewModelProviderFactory> viewModelProviderFactoryProvider;

    private ChangeLocationActivitySubcomponentImpl(
        ChangeLocationActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ChangeLocationActivitySubcomponentBuilder builder) {
      this.viewModelProviderFactoryProvider =
          DoubleCheck.provider(
              ViewModelProviderFactory_Factory.create(
                  DaggerApplicationComponent.this.mapOfClassOfAndProviderOfViewModelProvider));
    }

    @Override
    public void inject(ChangeLocationActivity arg0) {
      injectChangeLocationActivity(arg0);
    }

    @CanIgnoreReturnValue
    private ChangeLocationActivity injectChangeLocationActivity(ChangeLocationActivity instance) {
      BaseActivity_MembersInjector.injectToastUtils(
          instance, DaggerApplicationComponent.this.toastUtilsProvider.get());
      ChangeLocationActivity_MembersInjector.injectMviewmodelfactory(
          instance, viewModelProviderFactoryProvider.get());
      return instance;
    }
  }

  private final class MyOrdersActivitySubcomponentBuilder
      extends ActivityProvider_MyOrdersActivity.MyOrdersActivitySubcomponent.Builder {
    private MyOrdersActivity seedInstance;

    @Override
    public ActivityProvider_MyOrdersActivity.MyOrdersActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(MyOrdersActivity.class.getCanonicalName() + " must be set");
      }
      return new MyOrdersActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MyOrdersActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MyOrdersActivitySubcomponentImpl
      implements ActivityProvider_MyOrdersActivity.MyOrdersActivitySubcomponent {
    private Provider<ViewModelProviderFactory> viewModelProviderFactoryProvider;

    private MyOrdersActivitySubcomponentImpl(MyOrdersActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MyOrdersActivitySubcomponentBuilder builder) {
      this.viewModelProviderFactoryProvider =
          DoubleCheck.provider(
              ViewModelProviderFactory_Factory.create(
                  DaggerApplicationComponent.this.mapOfClassOfAndProviderOfViewModelProvider));
    }

    @Override
    public void inject(MyOrdersActivity arg0) {
      injectMyOrdersActivity(arg0);
    }

    @CanIgnoreReturnValue
    private MyOrdersActivity injectMyOrdersActivity(MyOrdersActivity instance) {
      BaseActivity_MembersInjector.injectToastUtils(
          instance, DaggerApplicationComponent.this.toastUtilsProvider.get());
      MyOrdersActivity_MembersInjector.injectViewModelProviderFactory(
          instance, viewModelProviderFactoryProvider.get());
      return instance;
    }
  }

  private final class AboutUsActivitySubcomponentBuilder
      extends ActivityProvider_AboutUsActivity.AboutUsActivitySubcomponent.Builder {
    private AboutUsActivity seedInstance;

    @Override
    public ActivityProvider_AboutUsActivity.AboutUsActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(AboutUsActivity.class.getCanonicalName() + " must be set");
      }
      return new AboutUsActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(AboutUsActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class AboutUsActivitySubcomponentImpl
      implements ActivityProvider_AboutUsActivity.AboutUsActivitySubcomponent {
    private Provider<ViewModelProviderFactory> viewModelProviderFactoryProvider;

    private AboutUsActivitySubcomponentImpl(AboutUsActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final AboutUsActivitySubcomponentBuilder builder) {
      this.viewModelProviderFactoryProvider =
          DoubleCheck.provider(
              ViewModelProviderFactory_Factory.create(
                  DaggerApplicationComponent.this.mapOfClassOfAndProviderOfViewModelProvider));
    }

    @Override
    public void inject(AboutUsActivity arg0) {
      injectAboutUsActivity(arg0);
    }

    @CanIgnoreReturnValue
    private AboutUsActivity injectAboutUsActivity(AboutUsActivity instance) {
      BaseActivity_MembersInjector.injectToastUtils(
          instance, DaggerApplicationComponent.this.toastUtilsProvider.get());
      AboutUsActivity_MembersInjector.injectViewModelProviderFactory(
          instance, viewModelProviderFactoryProvider.get());
      return instance;
    }
  }

  private final class ChangeAddressActivitySubcomponentBuilder
      extends ActivityProvider_ChangeAddressActivity.ChangeAddressActivitySubcomponent.Builder {
    private ChangeAddressActivity seedInstance;

    @Override
    public ActivityProvider_ChangeAddressActivity.ChangeAddressActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            ChangeAddressActivity.class.getCanonicalName() + " must be set");
      }
      return new ChangeAddressActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(ChangeAddressActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class ChangeAddressActivitySubcomponentImpl
      implements ActivityProvider_ChangeAddressActivity.ChangeAddressActivitySubcomponent {
    private Provider<ViewModelProviderFactory> viewModelProviderFactoryProvider;

    private ChangeAddressActivitySubcomponentImpl(
        ChangeAddressActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ChangeAddressActivitySubcomponentBuilder builder) {
      this.viewModelProviderFactoryProvider =
          DoubleCheck.provider(
              ViewModelProviderFactory_Factory.create(
                  DaggerApplicationComponent.this.mapOfClassOfAndProviderOfViewModelProvider));
    }

    @Override
    public void inject(ChangeAddressActivity arg0) {
      injectChangeAddressActivity(arg0);
    }

    @CanIgnoreReturnValue
    private ChangeAddressActivity injectChangeAddressActivity(ChangeAddressActivity instance) {
      BaseActivity_MembersInjector.injectToastUtils(
          instance, DaggerApplicationComponent.this.toastUtilsProvider.get());
      ChangeAddressActivity_MembersInjector.injectViewModelProviderFactory(
          instance, viewModelProviderFactoryProvider.get());
      return instance;
    }
  }

  private final class FilterActivitySubcomponentBuilder
      extends ActivityProvider_FilterActivity.FilterActivitySubcomponent.Builder {
    private FilterActivity seedInstance;

    @Override
    public ActivityProvider_FilterActivity.FilterActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(FilterActivity.class.getCanonicalName() + " must be set");
      }
      return new FilterActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(FilterActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class FilterActivitySubcomponentImpl
      implements ActivityProvider_FilterActivity.FilterActivitySubcomponent {
    private Provider<ViewModelProviderFactory> viewModelProviderFactoryProvider;

    private FilterActivitySubcomponentImpl(FilterActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final FilterActivitySubcomponentBuilder builder) {
      this.viewModelProviderFactoryProvider =
          DoubleCheck.provider(
              ViewModelProviderFactory_Factory.create(
                  DaggerApplicationComponent.this.mapOfClassOfAndProviderOfViewModelProvider));
    }

    @Override
    public void inject(FilterActivity arg0) {
      injectFilterActivity(arg0);
    }

    @CanIgnoreReturnValue
    private FilterActivity injectFilterActivity(FilterActivity instance) {
      BaseActivity_MembersInjector.injectToastUtils(
          instance, DaggerApplicationComponent.this.toastUtilsProvider.get());
      FilterActivity_MembersInjector.injectViewModelProviderFactory(
          instance, viewModelProviderFactoryProvider.get());
      return instance;
    }
  }

  private final class FilterResultActivitySubcomponentBuilder
      extends ActivityProvider_FilterResultActivity.FilterResultActivitySubcomponent.Builder {
    private FilterResultActivity seedInstance;

    @Override
    public ActivityProvider_FilterResultActivity.FilterResultActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            FilterResultActivity.class.getCanonicalName() + " must be set");
      }
      return new FilterResultActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(FilterResultActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class FilterResultActivitySubcomponentImpl
      implements ActivityProvider_FilterResultActivity.FilterResultActivitySubcomponent {
    private Provider<ViewModelProviderFactory> viewModelProviderFactoryProvider;

    private FilterResultActivitySubcomponentImpl(FilterResultActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final FilterResultActivitySubcomponentBuilder builder) {
      this.viewModelProviderFactoryProvider =
          DoubleCheck.provider(
              ViewModelProviderFactory_Factory.create(
                  DaggerApplicationComponent.this.mapOfClassOfAndProviderOfViewModelProvider));
    }

    @Override
    public void inject(FilterResultActivity arg0) {
      injectFilterResultActivity(arg0);
    }

    @CanIgnoreReturnValue
    private FilterResultActivity injectFilterResultActivity(FilterResultActivity instance) {
      BaseActivity_MembersInjector.injectToastUtils(
          instance, DaggerApplicationComponent.this.toastUtilsProvider.get());
      FilterResultActivity_MembersInjector.injectViewModelProviderFactory(
          instance, viewModelProviderFactoryProvider.get());
      return instance;
    }
  }

  private final class TrackItemActivitySubcomponentBuilder
      extends ActivityProvider_TrackItemActivity.TrackItemActivitySubcomponent.Builder {
    private TrackItemActivity seedInstance;

    @Override
    public ActivityProvider_TrackItemActivity.TrackItemActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            TrackItemActivity.class.getCanonicalName() + " must be set");
      }
      return new TrackItemActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(TrackItemActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class TrackItemActivitySubcomponentImpl
      implements ActivityProvider_TrackItemActivity.TrackItemActivitySubcomponent {
    private Provider<ViewModelProviderFactory> viewModelProviderFactoryProvider;

    private TrackItemActivitySubcomponentImpl(TrackItemActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final TrackItemActivitySubcomponentBuilder builder) {
      this.viewModelProviderFactoryProvider =
          DoubleCheck.provider(
              ViewModelProviderFactory_Factory.create(
                  DaggerApplicationComponent.this.mapOfClassOfAndProviderOfViewModelProvider));
    }

    @Override
    public void inject(TrackItemActivity arg0) {
      injectTrackItemActivity(arg0);
    }

    @CanIgnoreReturnValue
    private TrackItemActivity injectTrackItemActivity(TrackItemActivity instance) {
      BaseActivity_MembersInjector.injectToastUtils(
          instance, DaggerApplicationComponent.this.toastUtilsProvider.get());
      TrackItemActivity_MembersInjector.injectViewModelProviderFactory(
          instance, viewModelProviderFactoryProvider.get());
      return instance;
    }
  }

  private final class AddressListActivitySubcomponentBuilder
      extends ActivityProvider_AddressListActivity.AddressListActivitySubcomponent.Builder {
    private AddressListActivity seedInstance;

    @Override
    public ActivityProvider_AddressListActivity.AddressListActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            AddressListActivity.class.getCanonicalName() + " must be set");
      }
      return new AddressListActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(AddressListActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class AddressListActivitySubcomponentImpl
      implements ActivityProvider_AddressListActivity.AddressListActivitySubcomponent {
    private Provider<ViewModelProviderFactory> viewModelProviderFactoryProvider;

    private AddressListActivitySubcomponentImpl(AddressListActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final AddressListActivitySubcomponentBuilder builder) {
      this.viewModelProviderFactoryProvider =
          DoubleCheck.provider(
              ViewModelProviderFactory_Factory.create(
                  DaggerApplicationComponent.this.mapOfClassOfAndProviderOfViewModelProvider));
    }

    @Override
    public void inject(AddressListActivity arg0) {
      injectAddressListActivity(arg0);
    }

    @CanIgnoreReturnValue
    private AddressListActivity injectAddressListActivity(AddressListActivity instance) {
      BaseActivity_MembersInjector.injectToastUtils(
          instance, DaggerApplicationComponent.this.toastUtilsProvider.get());
      AddressListActivity_MembersInjector.injectViewModelProviderFactory(
          instance, viewModelProviderFactoryProvider.get());
      return instance;
    }
  }
}
