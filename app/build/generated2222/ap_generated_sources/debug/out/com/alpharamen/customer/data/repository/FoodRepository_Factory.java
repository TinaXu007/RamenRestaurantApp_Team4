// Generated by Dagger (https://google.github.io/dagger).
package com.alpharamen.customer.data.repository;

import com.alpharamen.customer.data.local.preference.PreferencesHandler;
import com.alpharamen.customer.data.local.room.MusicDbHelper;
import com.alpharamen.customer.data.remote.WebService;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class FoodRepository_Factory implements Factory<FoodRepository> {
  private final Provider<PreferencesHandler> preferencesHandlerProvider;

  private final Provider<WebService> webServiceProvider;

  private final Provider<MusicDbHelper> musicDbHelperProvider;

  public FoodRepository_Factory(
      Provider<PreferencesHandler> preferencesHandlerProvider,
      Provider<WebService> webServiceProvider,
      Provider<MusicDbHelper> musicDbHelperProvider) {
    this.preferencesHandlerProvider = preferencesHandlerProvider;
    this.webServiceProvider = webServiceProvider;
    this.musicDbHelperProvider = musicDbHelperProvider;
  }

  @Override
  public FoodRepository get() {
    return provideInstance(preferencesHandlerProvider, webServiceProvider, musicDbHelperProvider);
  }

  public static FoodRepository provideInstance(
      Provider<PreferencesHandler> preferencesHandlerProvider,
      Provider<WebService> webServiceProvider,
      Provider<MusicDbHelper> musicDbHelperProvider) {
    return new FoodRepository(
        preferencesHandlerProvider.get(), webServiceProvider.get(), musicDbHelperProvider.get());
  }

  public static FoodRepository_Factory create(
      Provider<PreferencesHandler> preferencesHandlerProvider,
      Provider<WebService> webServiceProvider,
      Provider<MusicDbHelper> musicDbHelperProvider) {
    return new FoodRepository_Factory(
        preferencesHandlerProvider, webServiceProvider, musicDbHelperProvider);
  }

  public static FoodRepository newFoodRepository(
      PreferencesHandler preferencesHandler, WebService webService, MusicDbHelper musicDbHelper) {
    return new FoodRepository(preferencesHandler, webService, musicDbHelper);
  }
}
