// Generated by Dagger (https://google.github.io/dagger).
package com.alpharamen.customer.viewmodel;

import com.alpharamen.customer.data.repository.FoodRepository;
import com.alpharamen.customer.utils.InternetUtils;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class NotificationViewModel_Factory implements Factory<NotificationViewModel> {
  private final Provider<FoodRepository> homeRepositoryProvider;

  private final Provider<InternetUtils> internetUtilsProvider;

  public NotificationViewModel_Factory(
      Provider<FoodRepository> homeRepositoryProvider,
      Provider<InternetUtils> internetUtilsProvider) {
    this.homeRepositoryProvider = homeRepositoryProvider;
    this.internetUtilsProvider = internetUtilsProvider;
  }

  @Override
  public NotificationViewModel get() {
    return provideInstance(homeRepositoryProvider, internetUtilsProvider);
  }

  public static NotificationViewModel provideInstance(
      Provider<FoodRepository> homeRepositoryProvider,
      Provider<InternetUtils> internetUtilsProvider) {
    NotificationViewModel instance = new NotificationViewModel(homeRepositoryProvider.get());
    NotificationViewModel_MembersInjector.injectInternetUtils(
        instance, internetUtilsProvider.get());
    return instance;
  }

  public static NotificationViewModel_Factory create(
      Provider<FoodRepository> homeRepositoryProvider,
      Provider<InternetUtils> internetUtilsProvider) {
    return new NotificationViewModel_Factory(homeRepositoryProvider, internetUtilsProvider);
  }

  public static NotificationViewModel newNotificationViewModel(FoodRepository homeRepository) {
    return new NotificationViewModel(homeRepository);
  }
}
