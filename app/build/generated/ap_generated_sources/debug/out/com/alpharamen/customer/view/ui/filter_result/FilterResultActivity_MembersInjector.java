// Generated by Dagger (https://google.github.io/dagger).
package com.alpharamen.customer.view.ui.filter_result;

import com.alpharamen.customer.base.BaseActivity_MembersInjector;
import com.alpharamen.customer.factory.ViewModelProviderFactory;
import com.alpharamen.customer.utils.ToastUtils;
import dagger.MembersInjector;
import javax.inject.Provider;

public final class FilterResultActivity_MembersInjector
    implements MembersInjector<FilterResultActivity> {
  private final Provider<ToastUtils> toastUtilsProvider;

  private final Provider<ViewModelProviderFactory> viewModelProviderFactoryProvider;

  public FilterResultActivity_MembersInjector(
      Provider<ToastUtils> toastUtilsProvider,
      Provider<ViewModelProviderFactory> viewModelProviderFactoryProvider) {
    this.toastUtilsProvider = toastUtilsProvider;
    this.viewModelProviderFactoryProvider = viewModelProviderFactoryProvider;
  }

  public static MembersInjector<FilterResultActivity> create(
      Provider<ToastUtils> toastUtilsProvider,
      Provider<ViewModelProviderFactory> viewModelProviderFactoryProvider) {
    return new FilterResultActivity_MembersInjector(
        toastUtilsProvider, viewModelProviderFactoryProvider);
  }

  @Override
  public void injectMembers(FilterResultActivity instance) {
    BaseActivity_MembersInjector.injectToastUtils(instance, toastUtilsProvider.get());
    injectViewModelProviderFactory(instance, viewModelProviderFactoryProvider.get());
  }

  public static void injectViewModelProviderFactory(
      FilterResultActivity instance, ViewModelProviderFactory viewModelProviderFactory) {
    instance.viewModelProviderFactory = viewModelProviderFactory;
  }
}
